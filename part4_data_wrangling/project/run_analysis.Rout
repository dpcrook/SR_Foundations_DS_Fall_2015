
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.0.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> # one way to execute
> # $ cd ~/projects/Classes/FoundationsOfDataScience_sliderule/github/part4_data_wrangling/project
> # $ R CMD BATCH ./run_analysis.R
> 
> # setup
> setwd("~/projects/Classes/FoundationsOfDataScience_sliderule/github/part4_data_wrangling/project")
> 
> # packages
> library(ggplot2)
> suppressMessages(library(psych))
> library(plyr)
> suppressMessages(library(dplyr))
> 
> # Import the data from files
> 
> # read in features and activity labels
> features   <- read.csv ("UCI_HAR_Dataset/features.txt", sep = ' ', header = FALSE)
> colnames(features) <- c("feature_column",  "feature_name")
> str(features)
'data.frame':	561 obs. of  2 variables:
 $ feature_column: int  1 2 3 4 5 6 7 8 9 10 ...
 $ feature_name  : Factor w/ 477 levels "angle(tBodyAccJerkMean),gravityMean)",..: 243 244 245 250 251 252 237 238 239 240 ...
> 
> act_labels <- read.csv ("UCI_HAR_Dataset/activity_labels.txt", sep = ' ', header = FALSE)
> colnames(act_labels) <- c("activity_class_encoding",  "activity_name")
> act_labels$activity_class_encoding <- factor(act_labels$activity_class_encoding)
> act_labels
  activity_class_encoding      activity_name
1                       1            WALKING
2                       2   WALKING_UPSTAIRS
3                       3 WALKING_DOWNSTAIRS
4                       4            SITTING
5                       5           STANDING
6                       6             LAYING
> 
> # -----------------
> # test set
> # -----------------
> # $ wc -l test/X_test.txt test/subject_test.txt test/y_test.txt
> #     2947 test/X_test.txt
> #     2947 test/subject_test.txt
> #     2947 test/y_test.txt
>     
> test_act_labels  <- read.csv ("UCI_HAR_Dataset/test/y_test.txt", sep = ' ', header = FALSE)
> dim(test_act_labels)
[1] 2947    1
> 
> test_subj_labels  <- read.csv ("UCI_HAR_Dataset/test/subject_test.txt", sep = ' ', header = FALSE)
> dim(test_subj_labels)
[1] 2947    1
> 
> test_feature_measurements <- read.csv ("UCI_HAR_Dataset/test/X_test.txt", sep = '', header = FALSE)
> dim(test_feature_measurements)
[1] 2947  561
> 
> # describe(test_feature_measurements)
> 
> # check that activity levels have same number of observations as measurements
> print(ifelse((dim(test_feature_measurements)[1] != dim(test_act_labels)[1]) &
+              (dim(test_feature_measurements)[1] != dim(test_subj_labels)[1]),
+              "Error: length mismatch in test data",
+              "Good: length match in test data"))
[1] "Good: length match in test data"
> 
> # -----------------
> # train set
> # -----------------
> # wc -l train/X_train.txt train/subject_train.txt train/y_train.txt
> #     7352 train/X_train.txt
> #     7352 train/subject_train.txt
> #     7352 train/y_train.txt    
>     
> train_act_labels  <- read.csv ("UCI_HAR_Dataset/train/y_train.txt", sep = ' ', header = FALSE)
> dim(train_act_labels)
[1] 7352    1
> 
> train_subj_labels  <- read.csv ("UCI_HAR_Dataset/train/subject_train.txt", sep = ' ', header = FALSE)
> dim(train_subj_labels)
[1] 7352    1
> 
> train_feature_measurements <- read.csv ("UCI_HAR_Dataset/train/X_train.txt", sep = '', header = FALSE)
> dim(train_feature_measurements)
[1] 7352  561
> # describe(train_feature_measurements)
> 
> # check that activity levels have same number of observations as measurements
> print(ifelse((dim(train_feature_measurements)[1] != dim(train_act_labels)[1]) &
+              (dim(train_feature_measurements)[1] != dim(train_subj_labels)[1]),
+              "Error: length mismatch in train data",
+              "Good: length match in train data"))
[1] "Good: length match in train data"
> 
> # update the column names
> colnames(test_act_labels) <- c("activity_class_encoding")
> colnames(test_subj_labels) <- c("subject_id")
> colnames(test_feature_measurements) = features$feature_name
> 
> colnames(train_act_labels) <- c("activity_class_encoding")
> colnames(train_subj_labels) <- c("subject_id")
> colnames(train_feature_measurements) = features$feature_name
> 
> # add activity names
> test_feature_measurements$activity <- factor(test_act_labels$activity_class_encoding)
> levels(test_feature_measurements$activity) <- act_labels$activity_name
> 
> train_feature_measurements$activity <- factor(train_act_labels$activity_class_encoding)
> levels(train_feature_measurements$activity) <- act_labels$activity_name
> 
> # add subject ID (separate train id from test id)
> test_feature_measurements$subjectid <- factor(test_subj_labels$subject_id)
> train_feature_measurements$subjectid <- factor(train_subj_labels$subject_id)
> 
> 
> #### extract only the measurements on the mean and standard deviation
> 
> # helper function
> getDesiredColumnIndices <- function (df) {
+   columns = grep("-(std|mean)", colnames(df), value=FALSE)
+   columns = c(columns, grep("activity", colnames(df), value=FALSE))
+   columns = c(columns, grep("subjectid", colnames(df), value=FALSE))
+   columns
+ }
> 
> columns <- getDesiredColumnIndices(test_feature_measurements)
> test_measurements_subset <- test_feature_measurements[,columns]
> 
> columns <- getDesiredColumnIndices(train_feature_measurements)
> train_measurements_subset <- train_feature_measurements[,columns]
> 
> #### Merges the training and the test sets to create one data set.
> 
> # now merge the data frames
> feature_measurements <- rbind(train_measurements_subset, 
+                               test_measurements_subset)
> dim(feature_measurements)
[1] 10299    81
> 
> #### Create derived data set with the average of each variable for each activity and each subject.
> 
> # use dplyr to group and summarize each variable to its average
> tidy_feature_measurements <- feature_measurements %>%
+   group_by(subjectid, activity) %>%
+   summarise_each(funs(mean)) %>%
+   ungroup() %>% 
+   arrange()
> 
> head(tidy_feature_measurements, 6*3)
Source: local data frame [18 x 81]

   subjectid           activity tBodyAcc-mean()-X tBodyAcc-mean()-Y
      (fctr)             (fctr)             (dbl)             (dbl)
1          1            WALKING         0.2773308      -0.017383819
2          1   WALKING_UPSTAIRS         0.2554617      -0.023953149
3          1 WALKING_DOWNSTAIRS         0.2891883      -0.009918505
4          1            SITTING         0.2612376      -0.001308288
5          1           STANDING         0.2789176      -0.016137590
6          1             LAYING         0.2215982      -0.040513953
7          3            WALKING         0.2755675      -0.017176784
8          3   WALKING_UPSTAIRS         0.2608199      -0.032410941
9          3 WALKING_DOWNSTAIRS         0.2924235      -0.019355408
10         3            SITTING         0.2571976      -0.003502998
11         3           STANDING         0.2800465      -0.014337656
12         3             LAYING         0.2755169      -0.018955679
13         5            WALKING         0.2778423      -0.017285032
14         5   WALKING_UPSTAIRS         0.2684595      -0.032526976
15         5 WALKING_DOWNSTAIRS         0.2935439      -0.008501075
16         5            SITTING         0.2736941      -0.009900835
17         5           STANDING         0.2825444      -0.007004186
18         5             LAYING         0.2783343      -0.018304212
Variables not shown: tBodyAcc-mean()-Z (dbl), tBodyAcc-std()-X (dbl),
  tBodyAcc-std()-Y (dbl), tBodyAcc-std()-Z (dbl), tGravityAcc-mean()-X (dbl),
  tGravityAcc-mean()-Y (dbl), tGravityAcc-mean()-Z (dbl), tGravityAcc-std()-X
  (dbl), tGravityAcc-std()-Y (dbl), tGravityAcc-std()-Z (dbl),
  tBodyAccJerk-mean()-X (dbl), tBodyAccJerk-mean()-Y (dbl),
  tBodyAccJerk-mean()-Z (dbl), tBodyAccJerk-std()-X (dbl), tBodyAccJerk-std()-Y
  (dbl), tBodyAccJerk-std()-Z (dbl), tBodyGyro-mean()-X (dbl),
  tBodyGyro-mean()-Y (dbl), tBodyGyro-mean()-Z (dbl), tBodyGyro-std()-X (dbl),
  tBodyGyro-std()-Y (dbl), tBodyGyro-std()-Z (dbl), tBodyGyroJerk-mean()-X
  (dbl), tBodyGyroJerk-mean()-Y (dbl), tBodyGyroJerk-mean()-Z (dbl),
  tBodyGyroJerk-std()-X (dbl), tBodyGyroJerk-std()-Y (dbl),
  tBodyGyroJerk-std()-Z (dbl), tBodyAccMag-mean() (dbl), tBodyAccMag-std()
  (dbl), tGravityAccMag-mean() (dbl), tGravityAccMag-std() (dbl),
  tBodyAccJerkMag-mean() (dbl), tBodyAccJerkMag-std() (dbl),
  tBodyGyroMag-mean() (dbl), tBodyGyroMag-std() (dbl), tBodyGyroJerkMag-mean()
  (dbl), tBodyGyroJerkMag-std() (dbl), fBodyAcc-mean()-X (dbl),
  fBodyAcc-mean()-Y (dbl), fBodyAcc-mean()-Z (dbl), fBodyAcc-std()-X (dbl),
  fBodyAcc-std()-Y (dbl), fBodyAcc-std()-Z (dbl), fBodyAcc-meanFreq()-X (dbl),
  fBodyAcc-meanFreq()-Y (dbl), fBodyAcc-meanFreq()-Z (dbl),
  fBodyAccJerk-mean()-X (dbl), fBodyAccJerk-mean()-Y (dbl),
  fBodyAccJerk-mean()-Z (dbl), fBodyAccJerk-std()-X (dbl), fBodyAccJerk-std()-Y
  (dbl), fBodyAccJerk-std()-Z (dbl), fBodyAccJerk-meanFreq()-X (dbl),
  fBodyAccJerk-meanFreq()-Y (dbl), fBodyAccJerk-meanFreq()-Z (dbl),
  fBodyGyro-mean()-X (dbl), fBodyGyro-mean()-Y (dbl), fBodyGyro-mean()-Z (dbl),
  fBodyGyro-std()-X (dbl), fBodyGyro-std()-Y (dbl), fBodyGyro-std()-Z (dbl),
  fBodyGyro-meanFreq()-X (dbl), fBodyGyro-meanFreq()-Y (dbl),
  fBodyGyro-meanFreq()-Z (dbl), fBodyAccMag-mean() (dbl), fBodyAccMag-std()
  (dbl), fBodyAccMag-meanFreq() (dbl), fBodyBodyAccJerkMag-mean() (dbl),
  fBodyBodyAccJerkMag-std() (dbl), fBodyBodyAccJerkMag-meanFreq() (dbl),
  fBodyBodyGyroMag-mean() (dbl), fBodyBodyGyroMag-std() (dbl),
  fBodyBodyGyroMag-meanFreq() (dbl), fBodyBodyGyroJerkMag-mean() (dbl),
  fBodyBodyGyroJerkMag-std() (dbl), fBodyBodyGyroJerkMag-meanFreq() (dbl)
> 
> proc.time()
   user  system elapsed 
 19.146   0.363  19.689 
